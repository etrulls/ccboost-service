/** This is an example configuration file, you can use it as a template **/

# number of adaboost stumps (recommended >= 1000)
numStumps = 2000;

# output base file name. Output files will have this as the first part of their name
outFileName = "example_config"

# if artificial negatives should be appended
# you should leave this to false if you don't know what it is
appendArtificialNegatives = false;
treatArtificialNegativesAsPositivesInResampling = false;

# number of weak learners to explore at each AB iteration
# 4000 is a good value
numWLToExplorePerIter = 4000;

# this is experimental and it is not working yet
thresholdSearchOnWholeData = false;

# labeled voxels closer than borderMinDist voxels to the borders
#  will be discarded and not used for training
borderMinDist = 10;

# labeled voxels are clustered, and clusters with less than
#  minPosRegionSize voxels are discarded and not used for training
minPosRegionSize = 10;

# this allows for subsampling of the negatives
#  but it is experimental, so leave to 0.0
NegSampleProportion = 0.0;
PosSkipFactor = 0;

# at each boosting iteration, we take all the Np positives samples
#  and randomyl sample reweightingSamplingRatio * Np negatives
# 2 is a good value
reweightingSamplingRatio = 2;

# this is experimental, leave to false
relearnThresholds = false;

# this can be useful to check mislabeled samples in the annotations.
# It generates two output volumes, one for the negative and another one
# for the positive training samples, where the voxels corresponding
# to each training sample are given the value of the adaboost weights
#  exp(-y*score)
saveTrainingWeights = false;
saveTrainingWeightsPosFileName = "hippocampus-synapses/1000iters-posweights.nrrd";
saveTrainingWeightsNegFileName = "hippocampus-synapses/1000iters-negweights.nrrd";

# if platt scaling should be computed on the training set,
# generating a tif-output (uint8) or just output
#  the scores in nrrd format (float)
outputPlattScaling = false;

# output the orientation estimates for each voxel
outputOrientationEstimate = false;

# if you have already trained a classifier, you can give the path to the stumps file with this command
#savedStumpsPath = "hippocampus-synapses/2000stumps-orientMatrix-ignoreDilate10-noContext-stumps.cfg";
usedSavedStumpsPathOnlyForTesting = true;


# experimental, leave as is
useSynapsesTask = 0;
useSynapses = [];

# supervoxel seed and cubeness
svox:
{
    seed = 2;
    cubeness = 16;
}

# experimental
extra:
{
    saveTrainingFeatures = false;
    saveTestingFeatures = false;
}

# -- Training volume, ground truth and channels
train = 
    {
        # keep this to 0, because it is experimental and should not be used
        # If you need to erode/dilate the ground truth (RECOMMENDED), use the generated binary
        # called "BinaryErodeDilateSynapseImageFilter"
        groundTruthErodeRadius = 0;
        
        # path to raw stack
        rawVolume = "/path/to/train/volume.tif";
        
        # z to x,y voxel size factor
        zAnisotropyFactor = 1.0;    # 1.0 means isotropic
        
        # path to ground truth
        #  must be of type uint8, where 0 => negative sample, 255 => positive sample
        #                           and everything else is ignored
        groundTruth = "/path/to/train/labels.tif";
        
        # orientation estimate, take the "-repolarized" output of computeSynapseFeatures.py
        orientEstimate = "/path/to/train/synapse_features/hessOrient-s3.5-repolarized.nrrd";
        
        # polarity, THIS IS VERY IMPORTANT TO GET GOOD RESULTS
        # each entry specifies a voxel location (pos)
        #   and a direction (polarity), for a cluster
        #   of positive samples in the annotations.
        #
        # pos=[x,y,z], polarity=[vx,vy,vz], 
        #  where [x,y,z] is a coordinate of one of the voxels inside the cluster, 
        #  and vx, vy and vz are either -1, 0 or +1.
        # So, if the synapse is mostly pointing in the x direction, 
        #  and the vesicles are to the left of the synapse, set [vx,vy,vz] = [-1,0,0], 
        #  because the vesicles are predominantly in the negative X direction with respect to the synaptic voxels.
        # If they are to the right, then set [vx,vy,vz] = [1,0,0].
        # You can also use vx and vy simultaneously if you want, 
        # all that it does is to check the hessian orientation later,
        # and flip it as needed so that it points in the direction that [vx,vy,vz] tell.
        #
        # If you don't specify polarity data for all clusters, the program
        #  will report those missing and exit, so you can use that
        #  as a first step to localize all clusters.
        ccPolarity = (
                {   pos      = [615,161,3];
                    polarity = [0,-1,0];
                },
                {   pos      = [200,132,22];
                    polarity = [0,-1,1];
                }
            );
        
        # these are the feature channels, which must be precomputed with computeSynapseFeatures.py
        otherFeatures = 
        [   
            "/path/to/train/synapse_features/gradient-magnitude-s1.0.nrrd",
            "/path/to/train/synapse_features/gradient-magnitude-s1.6.nrrd",
            "/path/to/train/synapse_features/gradient-magnitude-s3.5.nrrd",
            "/path/to/train/synapse_features/gradient-magnitude-s5.0.nrrd",
            "/path/to/train/synapse_features/stensor-s0.5-r1.0.nrrd",
            "/path/to/train/synapse_features/stensor-s0.8-r1.6.nrrd",
            "/path/to/train/synapse_features/stensor-s1.8-r3.5.nrrd",
            "/path/to/train/synapse_features/stensor-s2.5-r5.0.nrrd"
        ];
    };
    
# the test volume(s) follow. you can have more than one
test = (
    {
        rawVolume = "/path/to/test/volume.tif";
        
        # z to x,y voxel size factor, MUST BE THE SAME AS WHAT WAS USED FOR TRAINING
        zAnisotropyFactor = 1.0;    # 1.0 means isotropic
        
        orientEstimate = "/path/to/test/synapse_features/hessOrient-s3.5-repolarized.nrrd";
        
        otherFeatures = 
        [  
            "/path/to/test/synapse_features/gradient-magnitude-s1.0.nrrd",
            "/path/to/test/synapse_features/gradient-magnitude-s1.6.nrrd",
            "/path/to/test/synapse_features/gradient-magnitude-s3.5.nrrd",
            "/path/to/test/synapse_features/gradient-magnitude-s5.0.nrrd",
            "/path/to/test/synapse_features/stensor-s0.5-r1.0.nrrd",
            "/path/to/test/synapse_features/stensor-s0.8-r1.6.nrrd",
            "/path/to/test/synapse_features/stensor-s1.8-r3.5.nrrd",
            "/path/to/test/synapse_features/stensor-s2.5-r5.0.nrrd"
        ];
    }
)
 
